import DotManager from "./DotManager";
import ColorManager from "./ColorManager";
export default class GenderShape {
    point: paper.Point;
    protected scalePoint: paper.Point;
    protected _distance: number;
    protected _vector: paper.Point;
    protected _shape: any;
    protected colorMan: ColorManager;
    protected growSpeed: number;
    protected scaleSpeed: number;
    protected rotation: number;
    dotManager: DotManager;
    isGrowing: boolean;
    doneGrowing: boolean;
    isScaling: boolean;
    doneScaling: boolean;
    acceleration: paper.Point;
    velocity: paper.Point;
    collisionEnabled: boolean;
    isColliding: boolean;
    circleArr: paper.Path[];
    appendageArr: paper.Path[];
    shapeArr: paper.Path[];
    radius: number;
    genitalWidth: number;
    genitalHeight: number;
    genitalEndHeight: number;
    constructor(dotManager: DotManager, point?: paper.Point, radius?: number, distance?: number, genitalWidth?: number, genitalEndHeight?: number, innerColor?: paper.Color, outerColor?: paper.Color);
    protected applyVisibility(item: paper.Path | paper.PathItem): void;
    protected addToArr(arr: any[], ...args: any[]): void;
    protected scrubArr(arr: any[], distance?: number): void;
    protected cleanUpAll(): void;
    calcSize(height?: number): number;
    get endSize(): number;
    get size(): number;
    get distance(): number;
    set distance(distance: number);
    get vector(): paper.Point;
    set vector(vector: paper.Point);
    get colorManager(): ColorManager;
    get innerColor(): paper.Color;
    set innerColor(color: paper.Color);
    get outerColor(): paper.Color;
    set outerColor(color: paper.Color);
    get position(): paper.Point;
    set position(position: paper.Point);
    get shape(): any;
    set shape(shape: any);
    get infoString(): string;
    run(): void;
    iterate(): void;
    genCircle(visible?: boolean, point?: paper.Point, radius?: number): paper.Path.Circle;
    collisionDetected(value?: boolean): void;
    genGenitalia(height: number, apply?: boolean): {
        penis: paper.Path.Line;
        butt: paper.Path.Line;
    };
    growGenitalia(): void;
    applyGenitalia(genitalia: {
        penis: paper.Path;
        butt: paper.Path;
    }): void;
    outOfBounds(): boolean;
    checkBorders(): void;
    moveTowardScreen(): void;
    drawVector(): void;
    protected generateFirstVector(): void;
    attractShape(shape: GenderShape): void;
    applyForce(force: paper.Point): void;
    updatePosition(): void;
}
